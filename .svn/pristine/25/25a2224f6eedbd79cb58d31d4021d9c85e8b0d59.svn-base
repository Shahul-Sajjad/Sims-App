import { Component, OnInit, Input } from '@angular/core';
import { CommonService } from 'src/app/services/common.service';
import { SimsHttpCoreServices } from 'src/app/services/sims-http-core.service';
import { FormGroup, FormControl } from '@angular/forms';
import { InvoiceDataService } from 'src/app/services/invoice-data.service';


export interface InvoiceTypeList {
  slNo: string;
  invoiceType: string;
}

export interface CurrencyList {
  value: string;
  name: string;
}

export interface CompanyList {
  compCode: string;
  compName: string;
}

export interface GstNoList {
  name: string;
  value: string;
}

export interface LocationList {
  srno: string;
  location: string;
  gstNo: string;
  businessPlace: string;
}

@Component({
  selector: 'app-invoice-header',
  templateUrl: './invoice-header.component.html',
  styleUrls: ['./invoice-header.component.scss']
})
export class InvoiceHeaderComponent implements OnInit {

  ipAddressee: boolean;
  refreshAddressee: boolean;
  inpCostCeneter: boolean;

  invoiceHeaderForm = new FormGroup({
    invoiceNumber: new FormControl(''),
    taskId: new FormControl(''),
    classification: new FormControl(''),
    invoiceDate: new FormControl(''),
    invoiceRcptDate: new FormControl(''),
    invoiceType: new FormControl(''),
    vendorCode: new FormControl(''),
    vendorName: new FormControl(''),
    vendorPan: new FormControl(''),
    poNumber: new FormControl(''),
    companyCode: new FormControl(''),
    currency: new FormControl(''),
    language: new FormControl(''),
    company: new FormControl(''),
    country: new FormControl(''),
    localAmt: new FormControl(''),
    basic: new FormControl(''),
    freight: new FormControl(''),
    taxAmt: new FormControl(''),
    total: new FormControl(''),
    difference: new FormControl(''),
    payMethod: new FormControl(''),
    regionDes: new FormControl(''),
    exchangeRate: new FormControl(''),
    vendorGST: new FormControl(''),
    billGST: new FormControl(''),
    houseBankId: new FormControl(''),
    digitalSign: new FormControl(''),
    original: new FormControl(''),
    dsValid: new FormControl(''),
    billOfEntry: new FormControl(''),
    location: new FormControl(''),
    batchId: new FormControl(''),
    igmDate: new FormControl(''),
    validationDate: new FormControl(''),
    scanDate: new FormControl(''),
    invoiceDueDate: new FormControl(''),
    erpDueDate: new FormControl(''),
    countryCode: new FormControl(''),
    city: new FormControl(''),
    name2: new FormControl(''),
    vendorRegion: new FormControl(''),
    street: new FormControl(''),
    addresseeDOA: new FormControl(''),
    DOACC: new FormControl(''),
    portCode: new FormControl(''),
    invoiceStatus: new FormControl(''),
    partnerBank: new FormControl(''),
    purchaseGroup: new FormControl(''),
    OCCRemarks: new FormControl(''),
    vendorAdd: new FormControl(''),
    billingAdd: new FormControl(''),
    swissCode: new FormControl(''),
    placeOfSupply: new FormControl('')
  });

  @Input() invNum;
  @Input() internalId;
  @Input() mode;
  @Input() taskId;

  showAddresseeDOA = true;
  showCountry = true;
  showCity = true;
  showRegion = true;
  showName2 = true;
  showStreet = true;
  showBatchId = true;
  showCostCenter = true;
  userId;

  constructor(
    private commonService: CommonService,
    private simsHttpCoreServices: SimsHttpCoreServices,
    private invoiceDataService: InvoiceDataService
  ) { }

  invoiceTypeList: InvoiceTypeList[] = [];

  companyList: CompanyList[] = [];

  gstNoLists: GstNoList[] = [];

  locationLists: LocationList[] = [];

  currencyLists: CurrencyList[] = [
    { value: 'INR', name: 'INR' },
    { value: 'USD', name: 'USD' },
    { value: 'EUR', name: 'EUR' },
    { value: 'GBP', name: 'GBP' },
    { value: 'SGD', name: 'SGD' },
    { value: 'MYR', name: 'MYR' },
    { value: 'ZMK', name: 'ZMK' },
    { value: 'XCD', name: 'XCD' },
    { value: 'XDR', name: 'XDR' },
    { value: 'XAU', name: 'XAU' },
    { value: 'XPD', name: 'XPD' },
    { value: 'XAG', name: 'XAG' },
    { value: 'XPT', name: 'XPT' },
    { value: 'FRF', name: 'FRF' },
    { value: 'ILS', name: 'ILS' },
    { value: 'TRY', name: 'TRY' },
    { value: 'SKK', name: 'SKK' },
    { value: 'CZK', name: 'CZK' },
    { value: 'PLN', name: 'PLN' },
    { value: 'ECU', name: 'ECU' }
  ];
  ngOnInit() {
    console.log(this.invNum);
    this.getCompanyWiseInvoiceTypes();
    this.getDistinctCompCode();
    this.getCompanyWiseLocations();
    this.getDistinctBillToGstNo();
    this.getUserRole();
    this.getInvoiceHeaderDetails();
  }

  getCompanyWiseInvoiceTypes() {

    const dataRequest = '<comp_code>L001</comp_code>';
    // tslint:disable-next-line: max-line-length
    const soapRequest = this.commonService.getSoapBody('GetCompanyWiseInvoiceTypes', 'http://schemas.cordys.com/WINDatabaseMetadata', dataRequest);
    this.simsHttpCoreServices.httpPost(soapRequest).subscribe(response => {
      const invoiceTypeListInfo = this.responseDataManipulation(response, 'GetCompanyWiseInvoiceTypesResponse');
      invoiceTypeListInfo.forEach(element => {
        const invoiceTypeList = {
          slNo: element.old[0].mtr_ap_invoice_type[0].slno[0],
          invoiceType: element.old[0].mtr_ap_invoice_type[0].invoice_type[0]
        };
        this.invoiceTypeList.push(invoiceTypeList);
      });
    });

  }
  getDistinctCompCode() {
    const dataRequest = '<queryString>select distinct comp_code,name from mtr_entity where erp_id=' + '\'SAP001\'' + '</queryString>';
    const soapRequest = this.commonService.getSoapBody('RunSqlQuery', 'http://schemas.cordys.com/WINDatabaseMetadata', dataRequest);
    this.simsHttpCoreServices.httpPost(soapRequest).subscribe(response => {
      const companyItems = this.responseDataManipulation(response, 'RunSqlQueryResponse');
      companyItems.forEach(element => {
        const companyList = {
          compCode: element.old[0].mtr_entity[0].comp_code[0],
          compName: element.old[0].mtr_entity[0].name[0]
        };
        this.companyList.push(companyList);
      });
    });
  }

  getDistinctBillToGstNo() {
    // tslint:disable-next-line: max-line-length
    const dataRequest = `<queryString>select distinct * from (select CONCAT(gstNo,' (',state,')- ',business_Place) as billToGstNo,gstNo from dbo.mtr_gst_number where plant_Code!= '')</queryString>`;
    const soapRequest = this.commonService.getSoapBody('RunSqlQuery', 'http://schemas.cordys.com/WINDatabaseMetadata', dataRequest);
    this.simsHttpCoreServices.httpPost(soapRequest).subscribe(response => {
      const distinctBillToGstNO = this.responseDataManipulation(response, 'RunSqlQueryResponse');
      distinctBillToGstNO.forEach(element => {
        const gstNoList = {
          name: element.old[0].mtr_entity[0].comp_code[0],
          value: element.old[0].mtr_entity[0].name[0]
        };
        this.gstNoLists.push(gstNoList);
      });
    });
  }

  getCompanyWiseLocations() {

    const dataRequest = '<comp_code>L001</comp_code>';
    // tslint:disable-next-line: max-line-length
    const soapRequest = this.commonService.getSoapBody('GetCompanyWiseLocations', 'http://schemas.cordys.com/WINDatabaseMetadata', dataRequest);
    this.simsHttpCoreServices.httpPost(soapRequest).subscribe(response => {

      const companyLocation = this.responseDataManipulation(response, 'GetCompanyWiseLocationsResponse');
      companyLocation.forEach(element => {
        const locationLists = {
          srno: element.old[0].mtr_location[0].srno[0],
          location: element.old[0].mtr_location[0].location[0],
          gstNo: element.old[0].mtr_location[0].gstNo[0],
          businessPlace: element.old[0].mtr_location[0].businessPlace[0],
        };
        this.locationLists.push(locationLists);
      });
    });

  }

  getInvoiceHeaderDetails() {
    const dataRequest = '<InvoiceNumber>' + this.invNum + '</InvoiceNumber>' + '<internalId>' + this.internalId + '</internalId>';
    const soapRequest = this.commonService.getSoapBody('GetInvoiceHeaderDetailsbyInvNo', 'http://schemas.cordys.com/WINDatabaseMetadata', dataRequest);
    this.simsHttpCoreServices.httpPost(soapRequest).subscribe(response => {
      const headerFormItems = this.responseDataManipulation(response, 'GetInvoiceHeaderDetailsbyInvNoResponse');
      headerFormItems.forEach(element => {
        this.setInvoiceHeaderFormData(element);
        this.headerFormValidation();
      });
    });
  }

  onChangeInvoiceType() {
    const invoiceType = this.invoiceHeaderForm.value.invoiceType;
    const invoiceClassification = this.invoiceHeaderForm.value.classification;
    const compCode = this.invoiceHeaderForm.value.companyCode;
    if (compCode === 'L001') {
      if (invoiceType === '5' || invoiceType === '6' || invoiceType === '7' || invoiceType === '8' || invoiceType === '23') {
        this.invoiceHeaderForm.patchValue({
          houseBankId: ''
        });
      } else {
        this.invoiceHeaderForm.patchValue({
          houseBankId: 'CIT06'
        });
      }
    }
    // tslint:disable-next-line: max-line-length
    if (invoiceType === '1' || invoiceType === '5' || invoiceType === '9' || invoiceType === '10' || invoiceType === '18' || invoiceType === '20' || invoiceType === '22') {
      this.showAddresseeDOA = true;
    } else {
      this.showAddresseeDOA = false;
    }
  }

  headerFormValidation() {

    this.showBatchId = false;
    this.showCity = false;
    this.showCountry = false;
    this.showName2 = false;
    this.showRegion = false;
    const invoiceType = this.invoiceHeaderForm.value.invoiceType;
    const invoiceClassification = this.invoiceHeaderForm.value.classification;
    const invoiceStatus = this.invoiceHeaderForm.value.invoiceStatus.split('-')[1];
    const invoiceTypeLists = ['1', '5', '9', '10', '18', '20', '22'];

    if (invoiceTypeLists.includes(invoiceType)) {
      this.showAddresseeDOA = false;
      this.showCostCenter = false;
    } else {
      this.showAddresseeDOA = true;
      this.showCostCenter = true;
    }

    if (invoiceClassification === 'Non-PO') {
      this.showAddresseeDOA = false;
      this.showCostCenter = false;
    }

    if (invoiceType === '27' && invoiceClassification === 'Non-PO') {
      this.showCity = false;
      this.showCountry = false;
      this.showRegion = false;
      this.showName2 = false;
      this.showStreet = false;
    }

  }

  getUserRole() {
    // tslint:disable-next-line: max-line-length
    const dataRequest = '<ud_userid>asavarinaik@PSPartition</ud_userid>';
    const soapRequest = this.commonService.getSoapBody('GetRoleNameByUserID', 'http://schemas.cordys.com/WINDatabaseMetadata', dataRequest);
    this.simsHttpCoreServices.httpPost(soapRequest).subscribe(response => {
      const userInfo = this.responseDataManipulation(response, 'GetRoleNameByUserIDResponse');
      this.userId = userInfo[0].old[0].getRoleNameByUserID[0].getRoleNameByUserID[0];
    });
  }

  setInvoiceHeaderFormData(element) {
    this.invoiceHeaderForm.patchValue({
      invoiceNumber: element.old[0].invoice_header[0].invoice_no[0],
      taskId: element.old[0].invoice_header[0].work_item[0],
      classification: element.old[0].invoice_header[0].invoice_category[0],
      invoiceDate: element.old[0].invoice_header[0].invoice_date[0],
      invoiceRcptDate: element.old[0].invoice_header[0].invoice_recieved_date[0],
      invoiceType: element.old[0].invoice_header[0].invoice_type[0],
      vendorCode: element.old[0].invoice_header[0].vendor[0],
      vendorName: element.old[0].invoice_header[0].vendor_name[0],
      vendorPan: element.old[0].invoice_header[0].vendor_pan[0],
      poNumber: element.old[0].invoice_header[0].invoice_po[0],
      companyCode: element.old[0].invoice_header[0].comp_code[0],
      currency: element.old[0].invoice_header[0].currency[0],
      language: element.old[0].invoice_header[0].lang[0],
      company: element.old[0].invoice_header[0].comp_code[0],
      country: element.old[0].invoice_header[0].entity_id[0],
      localAmt: element.old[0].invoice_header[0].local_curr_amt[0].$ ? '' : element.old[0].invoice_header[0].local_curr_amt[0],
      basic: element.old[0].invoice_header[0].sub_total[0],
      freight: element.old[0].invoice_header[0].frieght_amount[0],
      taxAmt: element.old[0].invoice_header[0].tax_total[0],
      total: element.old[0].invoice_header[0].grand_total[0],
      difference: (+element.old[0].invoice_header[0].grand_total[0] - (+element.old[0].invoice_header[0].sub_total[0] + +element.old[0].invoice_header[0].frieght_amount[0] + +element.old[0].invoice_header[0].tax_total[0])).toFixed(2),
      payMethod: element.old[0].invoice_header[0].payment_method[0],
      regionDes: element.old[0].invoice_header[0].Region_desc[0],
      exchangeRate: element.old[0].invoice_header[0].exchange_rate[0].$ ? '' : element.old[0].invoice_header[0].exchange_rate[0],
      vendorGST: element.old[0].invoice_header[0].vendor_gstNo[0],
      billGST: element.old[0].invoice_header[0].billToGstNo[0],
      houseBankId: element.old[0].invoice_header[0].house_bankid[0],
      digitalSign: element.old[0].invoice_header[0].digital_sign[0],
      original: element.old[0].invoice_header[0].is_original[0],
      dsValid: element.old[0].invoice_header[0].validation_digital_sign[0],
      billOfEntry: element.old[0].invoice_header[0].bill_of_entry[0],
      location: element.old[0].invoice_header[0].location[0],
      batchId: element.old[0].invoice_header[0].internal_doc_id[0],
      igmDate: element.old[0].invoice_header[0].igm_date[0] instanceof Object?"":element.old[0].invoice_header[0].igm_date[0],
      validationDate: element.old[0].invoice_header[0].validation_date[0],
      scanDate: element.old[0].invoice_header[0].inv_scan_date[0],
      invoiceDueDate: element.old[0].invoice_header[0].inv_due_date[0],
      erpDueDate: element.old[0].invoice_header[0].erp_due_date[0],
      countryCode: element.old[0].invoice_header[0].country_code[0].$ ? '' : element.old[0].invoice_header[0].country_code[0],
      city: element.old[0].invoice_header[0].city[0].$ ? '' : element.old[0].invoice_header[0].city[0],
      name2: element.old[0].invoice_header[0].name2[0].$ ? '' : element.old[0].invoice_header[0].name2[0],
      vendorRegion: element.old[0].invoice_header[0].region[0],
      street: element.old[0].invoice_header[0].street[0].$ ? '' : element.old[0].invoice_header[0].street[0],
      addresseeDOA: element.old[0].invoice_header[0].addressee_name[0],
      DOACC: element.old[0].invoice_header[0].costcenter[0].$ ? '' : element.old[0].invoice_header[0].costcenter[0],
      portCode: element.old[0].invoice_header[0].port_code[0],
      invoiceStatus: element.old[0].invoice_header[0].Invoice_Status[0] + '-' + element.old[0].invoice_header[0].keyword[0],
      partnerBank: element.old[0].invoice_header[0].partner_bank_key[0],
      purchaseGroup: element.old[0].invoice_header[0].purchase_grp[0],
      OCCRemarks: element.old[0].invoice_header[0].validator_remarks[0],
      vendorAdd: element.old[0].invoice_header[0].vendor_address[0],
      billingAdd: element.old[0].invoice_header[0].billing_to[0],
      swissCode: element.old[0].invoice_header[0].bank_ref[0].$ ? '' : element.old[0].invoice_header[0].bank_ref[0],
      placeOfSupply: element.old[0].invoice_header[0].place_supply[0],
    });
  }

  responseDataManipulation(response, responseKey) {
    const parseData = this.commonService.parseXML(response);
    return parseData['__zone_symbol__value']['SOAP:Envelope']['SOAP:Body'][0][responseKey][0].tuple;

  }

  /*   onChangeInvoiceClassification(){
      const invoiceHeaderValue=this.invoiceHeaderForm.value;
      const invoiceDetailsTable=this.invoiceDataService.getInvoiceDetailTableData;
      if(invoiceHeaderValue.invoiceType=="1" || invoiceHeaderValue.invoiceType=="5" ||
      invoiceHeaderValue.invoiceType=="9" || invoiceHeaderValue.invoiceType=="10" ||
      invoiceHeaderValue.invoiceType=="18" ||invoiceHeaderValue.invoiceType=="20" ||
      invoiceHeaderValue.invoiceType=="22"){
       this.ipAddressee=true; //hide disabled value
       this.refreshAddressee=true; //hide disabled value
       this.inpCostCeneter=true; //hide disabled value
      }else{
        this.ipAddressee=false;  //show disabled value
       this.refreshAddressee=false; //show disabled value
       this.inpCostCeneter=false; //show disabled value
      }

      if(invoiceHeaderValue.classification=="Non-PO"){
        this.ipAddressee=false; //show disabled value
       this.refreshAddressee=false; //show disabled value
       this.inpCostCeneter=false; //show disabled value
      }
      if(invoiceHeaderValue.DOACC!="" && invoiceHeaderValue.classification == "Non-PO")
      {
        for (var t = 0; t <= invoiceDetailsTable.length; t++) {
          invoiceHeaderValue.tbl_cc[t].patchValue(invoiceHeaderValue.DOACC);
              }
              invoiceHeaderValue.counter_chkpo=1;
      }
    }
   */
  onKey(event: any) {
    this.invoiceDataService.setInvoiceHeaderData(this.invoiceHeaderForm.value);

  }
}
