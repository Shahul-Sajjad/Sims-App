import { Component, OnInit, ViewChild } from "@angular/core";
import { MatPaginator } from "@angular/material/paginator";
import { MatTableDataSource } from "@angular/material/table";
import { ActivatedRoute } from "@angular/router";
import { SelectionModel } from "@angular/cdk/collections";
import { MatSort } from '@angular/material/sort';

import { SimsHttpCoreServices } from "../../services/sims-http-core.service";
import { CommonService } from "../../services/common.service";

export interface PeriodicElement {
  task: string;
  sender: string;
  assignedTo: string;
  receivedOn: string;
  dueDate: string;
  color: string;
}

let inboxTaskData: PeriodicElement[] = [];

@Component({
  selector: "app-inbox",
  templateUrl: "./inbox.component.html",
  styleUrls: ["./inbox.component.scss"]
})
export class InboxComponent implements OnInit {
  routeParameter: string;
  assignedTaskCount: number = 0;
  completedTaskCount:number = 0;
  dueDateTaskCount:number = 0;
  activeStatusCount: number = 0;
  activeTaskStatus = "ASSIGNED";
  loadInboxSpinner: boolean = true;

  displayedColumns: string[] = [
    "select",
    "task",
    "sender",
    "assignedTo",
    "receivedOn",
    "dueDate"
  ];
  taskStatusCount = [
    { status: "'ASSIGNED'", value: "" },
    { status: "'COMPLETED'", value: "" }
  ];

  selection = new SelectionModel<PeriodicElement>(true, []);
  dataSource = new MatTableDataSource(inboxTaskData);
  
  @ViewChild(MatPaginator, { static: true }) paginator: MatPaginator;
  @ViewChild(MatSort, {static: true}) sort: MatSort;

  constructor(
    private route: ActivatedRoute,
    private simsHttpCoreServices: SimsHttpCoreServices,
    private commonService: CommonService
  ) {}

  ngOnInit() {
    this.getRouteParameter();
    this.getTasksInbox(this.activeTaskStatus);
    this.getCountTaskInbox();
    this.getCountDueTask();
  }

  getRouteParameter() {
    this.route.paramMap.subscribe(params => {
      this.routeParameter =
        params["params"].id === undefined ? "" : params["params"].id;
      if (params["params"].id !== null || params["params"].id !== undefined) {
        this.dataSource.filter = params["params"].id.trim().toLowerCase();
      }
    });
  }
  // This will return All Assigned task
  getTasksInbox(taskStatus, totalTask?) {
    let inboxTaskData: PeriodicElement[] = [];
    this.dataSource = new MatTableDataSource(inboxTaskData);
    this.activeTaskStatus = taskStatus;
    this.activeStatusCount = totalTask;
    this.loadInboxSpinner = true;

    if(taskStatus === "ASSIGNED") {
      this.activeTaskStatus = "Pending";
    }
    else if(taskStatus === "COMPLETED") {
      this.activeTaskStatus = "Completed";
    }
    taskStatus = "'" + taskStatus +"'";
    var dataRequest =
      "<TaskIdentifiers><TaskIdentifierType name='' id='' /></TaskIdentifiers><cursor id=\"0\" position=\"\" numRows=\"20\" maxRows=\"9999\" /><Criteria><Query>(Task.State = :tstate1)</Query><Parameters><Parameter name='tstate1' type='Task.State' value=" +
      taskStatus +
      " /></Parameters></Criteria><OrderBy>Task.StartDate DESC</OrderBy><AssignedBy></AssignedBy><Target type='user'>cn=processadmin,cn=organizational users,o=system,cn=cordys,cn=defaultInst,o=muraai.com</Target><ShowNonWorkableItems>true</ShowNonWorkableItems><ReturnTaskData>true</ReturnTaskData>";
    var soapRequest = this.commonService.getSoapBody("GetTasks", "http://schemas.cordys.com/notification/workflow/1.0", dataRequest);
    this.simsHttpCoreServices.httpPost(soapRequest).subscribe(assignedTasks => {
      var lists = this.commonService.parseXML(assignedTasks);
      console.log(lists);
      var taskLists =
        lists["__zone_symbol__value"]["SOAP:Envelope"]["SOAP:Body"][0][
          "GetTasksResponse"
        ][0]["tuple"];
      taskLists.forEach(element => {
        let task = {
          task: element["old"][0]["Task"][0]["Activity"][0]["_"],
          sender: element["old"][0]["Task"][0]["Sender"][0]["_"]
            .split(",")[0]
            .split("=")[1],
          assignedTo: element["old"][0]["Task"][0]["Assignee"][0]["_"]
            .split(",")[0]
            .split("=")[1],
          receivedOn: element.old[0]["Task"][0]["StartDate"],
          dueDate: element["old"][0]["Task"][0]["DeliveryDate"],
          color: "white"
        };
        inboxTaskData.push(task);
      });
      this.dataSource = new MatTableDataSource(inboxTaskData);
      this.loadInboxSpinner = false;
      this.dataSource.sort = this.sort;
      this.dataSource.paginator = this.paginator;
    });
  }

  // This method will return task count for different status
  getCountTaskInbox() {
    this.activeStatusCount = 0;
    this.taskStatusCount.forEach(element => {
      var dataRequest =
        "<TaskIdentifiers><TaskIdentifierType name='' id='' /></TaskIdentifiers><cursor id=\"0\" position=\"\" numRows=\"9999\" maxRows=\"9999\" /><Criteria><Query>(Task.State = :tstate1)</Query><Parameters><Parameter name='tstate1' type='Task.State' value=" +
        element.status +
        " /></Parameters></Criteria><OrderBy>Task.StartDate DESC</OrderBy><AssignedBy></AssignedBy><Target type='user'>cn=processadmin,cn=organizational users,o=system,cn=cordys,cn=defaultInst,o=muraai.com</Target><ShowNonWorkableItems>true</ShowNonWorkableItems><ReturnTaskData>true</ReturnTaskData>";
 
      var soapRequest = this.commonService.getSoapBody("GetTasks", "http://schemas.cordys.com/notification/workflow/1.0", dataRequest);
      this.simsHttpCoreServices
        .httpPost(soapRequest)
        .subscribe(assignedTasks => {
          var lists = this.commonService.parseXML(assignedTasks);
          var taskLists =
            lists["__zone_symbol__value"]["SOAP:Envelope"]["SOAP:Body"][0][
              "GetTasksResponse"
            ][0]["tuple"];
          element.value = taskLists.length;
          if(element.status === "'ASSIGNED'") {
            this.assignedTaskCount = taskLists.length;
            this.activeStatusCount = taskLists.length;
          }
          else if (element.status === "'COMPLETED'") {
            this.completedTaskCount = taskLists.length;
          }
        });
    });
  }

  applyFilter(filterValue: string) {
    this.dataSource.filter = filterValue.trim().toLowerCase();
  }

  // Refresh the table content with status Assigned
  refreshTable() {
    // call get tasks() : status Assigned
    this.getCountTaskInbox();
    this.getTasksInbox("ASSIGNED", this.assignedTaskCount);
  }

  // Delegate the selected task to another user
  delegateTask() {
    // Write your code here
  }

  // Forward the selected tash to another user
  forwardTaskToUser() {
    // Write your code here
  }

  // Get all users
  getAllUsers() {
    // Wrirte your code here
  }

  // Get logged in user role
  getUserRoles() {
    // Write your code here
  }


  // Calling Due task separately because the SOAP request is little bit different comparision to Assigned/Completed
  getDuetask(taskStatus?, taskCount?) {
    this.loadInboxSpinner = true;
    this.activeStatusCount = taskCount;
    if(taskStatus !== null || taskStatus !== undefined)
      this.activeTaskStatus = taskStatus;
    var dataRequest =
      "<TaskIdentifiers><TaskIdentifierType name='' id='' /></TaskIdentifiers><cursor id=\"0\" position=\"\" numRows=\"9999\" maxRows=\"9999\" /><Criteria><Query>(Task.State !='COMPLETED')</Query><Parameters><Parameter name='tstate1' type='Task.DueOn' value=\"'2020-02-25T11:12:32.32'\" /></Parameters></Criteria><OrderBy>Task.StartDate DESC</OrderBy><AssignedBy></AssignedBy><Target type='user'>cn=processadmin,cn=organizational users,o=system,cn=cordys,cn=defaultInst,o=muraai.com</Target><ShowNonWorkableItems>true</ShowNonWorkableItems><ReturnTaskData>true</ReturnTaskData>";
    var soapRequest = this.commonService.getSoapBody("GetTasks", "http://schemas.cordys.com/notification/workflow/1.0", dataRequest);
    this.simsHttpCoreServices.httpPost(soapRequest).subscribe(assignedTasks => {
      var lists = this.commonService.parseXML(assignedTasks);
      console.log(lists);
      var taskLists =
        lists["__zone_symbol__value"]["SOAP:Envelope"]["SOAP:Body"][0][
          "GetTasksResponse"
        ][0]["tuple"];
      this.dueDateTaskCount = taskLists.length;
      taskLists.forEach(element => {
        let task = {
          task: element["old"][0]["Task"][0]["Activity"][0]["_"],
          sender: element["old"][0]["Task"][0]["Sender"][0]["_"]
            .split(",")[0]
            .split("=")[1],
          assignedTo: element["old"][0]["Task"][0]["Assignee"][0]["_"]
            .split(",")[0]
            .split("=")[1],
          receivedOn: element.old[0]["Task"][0]["StartDate"],
          dueDate: element["old"][0]["Task"][0]["DeliveryDate"],
          color: "white"
        };
        inboxTaskData.push(task);
      });
      this.dataSource = new MatTableDataSource(inboxTaskData);
      this.loadInboxSpinner = false;
      this.dataSource.sort = this.sort;
      this.dataSource.paginator = this.paginator;
    });
  }

  getCountDueTask() {
    var dataRequest =
      "<TaskIdentifiers><TaskIdentifierType name='' id='' /></TaskIdentifiers><cursor id=\"0\" position=\"\" numRows=\"9999\" maxRows=\"9999\" /><Criteria><Query>(Task.State !='COMPLETED')</Query><Parameters><Parameter name='tstate1' type='Task.DueOn' value=\"'2020-02-25T11:12:32.32'\" /></Parameters></Criteria><OrderBy>Task.StartDate DESC</OrderBy><AssignedBy></AssignedBy><Target type='user'>cn=processadmin,cn=organizational users,o=system,cn=cordys,cn=defaultInst,o=muraai.com</Target><ShowNonWorkableItems>true</ShowNonWorkableItems><ReturnTaskData>true</ReturnTaskData>";
    var soapRequest = this.commonService.getSoapBody("GetTasks", "http://schemas.cordys.com/notification/workflow/1.0", dataRequest);
    this.simsHttpCoreServices.httpPost(soapRequest).subscribe(assignedTasks => {
      var lists = this.commonService.parseXML(assignedTasks);
      console.log(lists);
      var taskLists =
        lists["__zone_symbol__value"]["SOAP:Envelope"]["SOAP:Body"][0][
          "GetTasksResponse"
        ][0]["tuple"];
      this.dueDateTaskCount = taskLists.length;
    });
  }

  // Return task color based on status
  // NOTE: For sample I have added some dummy data, this will be cahnged when we will have real data
  getTaskColor(row) {
    if(row.task.includes("State"))
        return "#ff3e30";
    else if (row.task.includes("ASM"))
        return "#66ff73";
    else if(row.task.includes("Created"))
        return "#f7ff5e";
    else 
        return "white";
  }

  isAllSelected() {
    const numSelected = this.selection.selected.length;
    const numRows = this.dataSource.data.length;
    return numSelected === numRows;
  }

  /** Selects all rows if they are not all selected; otherwise clear selection. */
  masterToggle() {
    this.isAllSelected()
      ? this.selection.clear()
      : this.dataSource.data.forEach(row => this.selection.select(row));
  }

  /** The label for the checkbox on the passed row */
  checkboxLabel(row?: PeriodicElement): string {
    if (!row) {
      return `${this.isAllSelected() ? "select" : "deselect"} all`;
    }
    return `${
      this.selection.isSelected(row) ? "deselect" : "select"
    } row ${row.task + 1}`;
  }
}
