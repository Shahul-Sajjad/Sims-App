import { Component, OnInit, Input } from '@angular/core';
import { SimsHttpCoreServices } from 'src/app/services/sims-http-core.service';
import { CommonService } from 'src/app/services/common.service';
import { VendorBankDetails } from 'src/app/models/invoice-item.model';
import { InvoiceDataService } from 'src/app/services/invoice-data.service';
import { error } from '@angular/compiler/src/util';
import { MatSnackBar } from '@angular/material';

@Component({
  selector: 'app-invoice-actions',
  templateUrl: './invoice-actions.component.html',
  styleUrls: ['./invoice-actions.component.scss']
})
export class InvoiceActionsComponent implements OnInit {
  dataRequest = '';
  soapupdateRequest = '';
  vendorBankDetail: VendorBankDetails[] = [];
  invoiceNo: string;
  internalDocId: string;
  actionComplete: string;s
  actionStop: string;
  @Input() taskId;
  enbCommentBtn=true;
  endSaveBtn=true;
  slno: String;
  documentId: string;
  batchId: string;
  commentBy: string;
  // invoiceCommentForm: any;
  constructor(
    private simsHttpCoreServices: SimsHttpCoreServices,
    private commonService: CommonService,
    private invoiceDataService: InvoiceDataService,
    private _snackBar: MatSnackBar


  ) { }

  ngOnInit() {
    this.invoiceNo = "005556";
    this.internalDocId = "613";
    this.actionComplete = "Complete";
    this.actionStop = "STOP";
    this.slno = "1";
    this.documentId = "32233";
    this.batchId = "231";
    this.commentBy = "sameer";
    this.invoiceDataService.invoiceDetailHandler.subscribe((x:any)=>{
      if(x instanceof Object){
       this.endSaveBtn = x["disSaveBtn"]
      }
      this.enbCommentBtn=x;
    })
  }
  saveData() {
    let formaData = this.invoiceDataService.getInvoiceHeaderData();
    this.dataRequest = "<tuple><old><invoice_header qConstraint=\"0\"><invoice_no>" + this.invoiceNo + "</invoice_no><internal_doc_id>" + this.internalDocId + "</internal_doc_id></invoice_header></old><new><invoice_header qAccess=\"0\" qConstraint=\"0\" qInit=\"0\" qValues=\"\"><invoice_no>" + this.invoiceNo + "</invoice_no><internal_doc_id>" + this.internalDocId + "</internal_doc_id><invoice_date>" + formaData.invoiceDate + "</invoice_date><invoice_po>" + formaData.poNumber + "</invoice_po><invoice_status>" + formaData.invoiceStatus + "</invoice_status><vendor>" + formaData.vendorCode + "</vendor><costcenter>" + formaData.DOACC + "</costcenter><currency>" + formaData.currency + "</currency><entity_id>" + formaData.country + "</entity_id><validator_remarks>" + formaData.OCCRemarks + "</validator_remarks><frieght_amount>" + formaData.freight + "</frieght_amount><lang>" + formaData.language + "</lang><billing_to>" + formaData.billingAdd + "</billing_to><sub_total>" + formaData.basic + "</sub_total><tax_total>" + formaData.taxAmt + "</tax_total><grand_total>" + formaData.total + "</grand_total><invoice_recieved_date>" + formaData.invoiceRcptDate + "</invoice_recieved_date><invoice_type>" + formaData.invoiceType + "</invoice_type><vendor_name>" + formaData.vendorName + "</vendor_name><invoice_category>" + formaData.classification + "</invoice_category><exchange_rate>" + formaData.exchangeRate + "</exchange_rate><local_curr_amt>" + formaData.localAmt + "</local_curr_amt><vendor_gstNo>" + formaData.vendorGST + "</vendor_gstNo><billToGstNo>" + formaData.billGST + "</billToGstNo><igm_date>" + formaData.igmDate + "</igm_date><port_code>" + formaData.portCode + "</port_code><vendor_pan>" + formaData.vendorPan + "</vendor_pan><vendor_payment_method>" + formaData.payMethod + "</vendor_payment_method><house_bankid>" + formaData.houseBankId + "</house_bankid><location>" + formaData.location + "</location><validation_date>" + formaData.validationDate + "</validation_date><vendor_address>" + formaData.vendorAdd + "</vendor_address><addressee_name>" + formaData.addresseeDOA + "</addressee_name><bill_of_entry>" + formaData.billOfEntry + "</bill_of_entry><validation_digital_sign>" + formaData.digitalSign + "</validation_digital_sign><inv_due_date>" + formaData.invoiceDueDate + "</inv_due_date><inv_scan_date>" + formaData.scanDate + "</inv_scan_date><partner_bank_key>" + formaData.bankKey + "</partner_bank_key><is_original>" + formaData.original + "</is_original><place_supply>" + formaData.placeOfSupply + "</place_supply><erp_due_date>" + formaData.erpDueDate + "</erp_due_date><purchase_grp>" + formaData.purchaseGroup + "</purchase_grp><comp_code>" + formaData.companyCode + "</comp_code><region>" + formaData.vendorRegion + "</region><city>" + formaData.city + "</city><street>" + formaData.street + "</street><name2>" + formaData.name2 + "</name2><bank_ref>" + formaData.swissCode + "</bank_ref></invoice_header></new></tuple>";
    this.soapupdateRequest = this.commonService.getSoapBody("UpdateInvoice_header", "http://schemas.cordys.com/WINDatabaseMetadata", this.dataRequest);
    this.simsHttpCoreServices.httpPost(this.soapupdateRequest).subscribe(saveDetails => {
      // var lists = this.commonService.parseXML(vendorupdatedetails);
      this.openSnackBar("Saved successfully", "");
      this.endSaveBtn=true;

    }), () => { },
      error => { }
  }


  approveReject() {
    let formaData = this.invoiceDataService.getInvoiceHeaderData();
    this.dataRequest = "<TaskId>" + this.taskId + "</TaskId><Action>" + this.actionComplete + "</Action>";
    this.soapupdateRequest = this.commonService.getSoapBody("PerformTaskAction", "http://schemas.cordys.com/notification/workflow/1.0", this.dataRequest);
    this.simsHttpCoreServices.httpPost(this.soapupdateRequest).subscribe(saveDetails => {
      // var lists = this.commonService.parseXML(vendorupdatedetails);
      this.openSnackBar("Approved successfully", "");

    }), () => { },
      error => { }
  }
  saveComment() {
    let invoiceCommentForm = this.invoiceDataService.getInvoiceCommentsData();
    this.dataRequest = "<tuple><old><ap_comments qConstraint=\"0\"><slno>" + this.slno + "</slno><document_id>" + this.documentId + "</document_id><batch_id>" + this.batchId + "</batch_id><comment_by>" + this.commentBy + "</comment_by></ap_comments></old><new><ap_comments qAccess=\"0\" qConstraint=\"0\" qInit=\"0\" qValues=\"\"><comment>" + invoiceCommentForm.comments + "</comment></ap_comments></new></tuple>";
    this.soapupdateRequest = this.commonService.getSoapBody("UpdateAp_comments", "http://schemas.cordys.com/WINDatabaseMetadata", this.dataRequest);
    this.simsHttpCoreServices.httpPost(this.soapupdateRequest).subscribe(invoiceUpdatedComment => {
      var lists = this.commonService.parseXML(invoiceUpdatedComment);
      this.openSnackBar("Comment Saved successfully....", "");
      this.enbCommentBtn=true;
      // console.log('comment' + lists);
    }), () => { },
      error => { }
  }








pullPO_GR(){
  this.openSnackBar("Pull PO/GR is in progress ...", "");
}
postToSAP(){
  this.openSnackBar("Post to SAP is in progress ...", "");
}
cancelInvoice(){
  this.openSnackBar("Invoice cancellation is in progress ...", "");
}
downloadInvoice(){
  this.openSnackBar("Invoice downloaded successfully", "");
}


openSnackBar(message: string, action: string) {
  this._snackBar.open(message, action, {
    duration: 2000,
    verticalPosition: "top",
    horizontalPosition: "end",
    panelClass: ['snackBarColor']

  });
}

reverese_exit(){

  let formaData = this.invoiceDataService.getInvoiceHeaderData();
   let batchid=formaData.batchId;
  let erpid = 'SAP001';
  let docID = formaData.batchId;
  let poTypeVal = "PO";
  console.log("batchid "+batchid+" erpid "+erpid+" poTypeVal "+poTypeVal+" docID "+docID);
  
}

}